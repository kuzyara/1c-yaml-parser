&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИсходныйТекст = НСтр("ru = 'jobs:
                     |  build:
                     |    runs-on: ubuntu-latest
                     |    steps:
                     |      - uses: actions/checkout@v1
                     |      - name: Install Node packages
                     |        run: npm install'");
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьНаСервере()
	Результат = ДесериализоватьYML(ИсходныйТекст);
	
	РезультатСоответствие = ПоместитьВоВременноеХранилище(Результат, ЭтаФорма.УникальныйИдентификатор);
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Ключ");
	ДеревоЗначений.Колонки.Добавить("Значение");
	
	РезультатВДерево(Результат, ДеревоЗначений);
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "РезультатДерево");
КонецПроцедуры

&НаСервере
Процедура РезультатВДерево(Результат, РодительскаяСтрокаДерева)
	
	Если Тип("СписокЗначений") = ТипЗнч(Результат) Тогда
		
		Для Каждого ЭлементСписка	Из Результат Цикл
			ТекущаяСтрокаДерева	= РодительскаяСтрокаДерева.Строки.Добавить();
			ТекущаяСтрокаДерева.Ключ = ЭлементСписка.Представление;
			Если ТипЗнч(ЭлементСписка.Значение) = Тип("Строка") Тогда
				ТекущаяСтрокаДерева.Значение = ЭлементСписка.Значение;
			Иначе
				РезультатВДерево(ЭлементСписка.Значение, ТекущаяСтрокаДерева)
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Тип("Массив") = ТипЗнч(Результат) Тогда 
		
		Для Индекс = 0 По Результат.ВГраница() Цикл
			ТекущаяСтрокаДерева	= РодительскаяСтрокаДерева.Строки.Добавить();
			ТекущаяСтрокаДерева.Ключ = "ЭлементМассива[" + Индекс + "]";
			Если ТипЗнч(Результат[Индекс]) = Тип("Строка") Тогда
				ТекущаяСтрокаДерева.Значение = Результат[Индекс];
			Иначе
				РезультатВДерево(Результат[Индекс], ТекущаяСтрокаДерева)
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Преобразовать(Команда)
	ПреобразоватьНаСервере();
	Для Каждого ТекЭлемент Из РезультатДерево.ПолучитьЭлементы() Цикл
		Элементы.Результат.Развернуть(ТекЭлемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДесериализоватьYML(Текст)
	ТекущийОбъект = Неопределено;
	
	ТекущийТекст = "";
	Отступ       = "";
	Для Каждого Строка Из СтрРазделить(Текст, Символы.ПС) Цикл
		
		Если СтрНачинаетсяС(СокрЛ(Строка), "#") Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаБезОтступа = СокрЛ(Строка);
		Если ПустаяСтрока(СтрокаБезОтступа) Тогда
		     Продолжить;
		КонецЕсли;
		ТекущийОтступ = Сред(Строка, 0, СтрДлина(Строка) - СтрДлина(СтрокаБезОтступа));
		
		Если Отступ = ТекущийОтступ И ЗначениеЗаполнено(ТекущийТекст) Тогда
			Обработать(ТекущийОбъект, ТекущийТекст);
			ТекущийТекст = Строка;
		Иначе 
			ТекущийТекст = ТекущийТекст + ?(ЗначениеЗаполнено(ТекущийТекст), Символы.ПС, "") + Строка;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ТекущийТекст) Тогда
		Обработать(ТекущийОбъект, ТекущийТекст);
	КонецЕсли; 
	
	Возврат ТекущийОбъект;
	
КонецФункции

&НаСервере
Процедура Обработать(ТекущийОбъект, ТекущийТекст)
	
	Если ТекущийОбъект = Неопределено Тогда
		НачинаетсяСДефиса = СтрНачинаетсяС(СокрЛ(ТекущийТекст), "-");
		ТекущийОбъект = ?(НачинаетсяСДефиса, Новый Массив, Новый СписокЗначений);
	КонецЕсли; 
	
	Если ТипЗнч(ТекущийОбъект) = Тип("Массив") Тогда
		
		ПозицияЭлементаМассива = СтрНайти(ТекущийТекст, "-");
		ЗначениеЭлементаМассива = Лев(ТекущийТекст, ПозицияЭлементаМассива - 1) + " " + Сред(ТекущийТекст, ПозицияЭлементаМассива + 1);
		ЗначениеЭлементаМассива = УбратьОбщийОтступ(ЗначениеЭлементаМассива);
		
		Если СтрНайти(ЗначениеЭлементаМассива, Символы.ПС) = 0 И (СтрНайти(ЗначениеЭлементаМассива, ":") = 0 ИЛИ СтрНачинаетсяС(СокрЛ(ЗначениеЭлементаМассива), """")) Тогда
			ТекущийОбъект.Добавить(ЗначениеЭлементаМассива);
		Иначе
			ТекущийОбъект.Добавить(ДесериализоватьYML(ЗначениеЭлементаМассива));
		КонецЕсли; 
		
	Иначе
		
		ПозицияРазделителя = СтрНайти(ТекущийТекст, ":");
		ПозицияПереводаСтроки = СтрНайти(ТекущийТекст, Символы.ПС);
		КлючСтруктуры = Сред(ТекущийТекст, 0, ПозицияРазделителя - 1);
		
		Если ПозицияПереводаСтроки = 0 Тогда
			ТекущийОбъект.Добавить(Сред(ТекущийТекст, ПозицияРазделителя + 2), КлючСтруктуры);
		Иначе
			ТекстБезОтступа = УбратьОбщийОтступ(Сред(ТекущийТекст, ПозицияПереводаСтроки + 1));
			ТекущийОбъект.Добавить(ДесериализоватьYML(ТекстБезОтступа), КлючСтруктуры);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УбратьОбщийОтступ(Текст)
	
	Отступ = СтрДлина(Текст);
	МассивСтрок = СтрРазделить(Текст, Символы.ПС);
	Для Каждого Строка Из МассивСтрок Цикл
		СтрокаБезОтступа = СокрЛ(Строка);
		Отступ = Мин(Отступ, СтрДлина(Строка) - СтрДлина(СтрокаБезОтступа))
	КонецЦикла; 
	
	Для Счетчик = 0 По МассивСтрок.ВГраница() Цикл
		МассивСтрок[Счетчик] = Сред(МассивСтрок[Счетчик], Отступ + 1);
	КонецЦикла; 
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция YMLСериализатор(Структура, Знач КоличествоОтступов = 0)
	
	Ответ = "";
	Разд = "  ";
	
	Для Каждого Элемент Из Структура Цикл
		
		ТипЗначения = ТипЗнч(Элемент.Значение);
		Для Итератор = 1 По КоличествоОтступов Цикл
			Ответ = Ответ + Разд;
		КонецЦикла; 
		
		Если ТипЗначения = Тип("Структура") ИЛИ ТипЗначения = Тип("СписокЗначений") Тогда
			
			Ответ = Ответ + СтрШаблон("%1:
			                          |%2", 
			                          Элемент.Представление, 
			                          YMLСериализатор(Элемент.Значение, КоличествоОтступов + 1));
		ИначеЕсли ТипЗначения = Тип("Массив") Тогда
			Ответ = Ответ + 
			СтрШаблон("%1:
			          |", Элемент.Представление);
			//КоличествоОтступов = КоличествоОтступов + 1;
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				Для Итератор = 1 По КоличествоОтступов Цикл
					Ответ = Ответ + Разд;
				КонецЦикла; 
				Если ТипЗнч(ЭлементМассива) = Тип("Структура") 
					ИЛИ ТипЗнч(ЭлементМассива) = Тип("СписокЗначений") 
					ИЛИ ТипЗнч(ЭлементМассива) = Тип("Массив") Тогда
					Ответ = Ответ + СтрШаблон(Разд + "- %1", 
					                          СокрЛ(YMLСериализатор(ЭлементМассива, КоличествоОтступов + 2)));
				Иначе
					Ответ = Ответ + Разд +
					СтрШаблон("- %1
					          |", ЭлементМассива);
				КонецЕсли;
			КонецЦикла;
		Иначе
			
			СтроковоеПредставление = Строка(Элемент.Значение);
			
			Ответ = Ответ + 
			СтрШаблон("%1: %2
			          |", Элемент.Представление, СтроковоеПредставление);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура ПреобразоватьСоотвВТекст(Команда)
	Соответствие = ПолучитьИзВременногоХранилища(РезультатСоответствие);

	ИсходныйТекст = YMLСериализатор(Соответствие);
КонецПроцедуры
